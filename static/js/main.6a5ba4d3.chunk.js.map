{"version":3,"sources":["Components/header/threejs/SceneSubject.js","Components/header/threejs/GeneralLights.js","Components/header/threejs/SceneManager.js","Components/header/threejs/threeEntryPoint.js","Components/header/Header.js","App.js","index.js"],"names":["scene","group","THREE","cubes","geometry","color","x","material","cube","add","position","y","z","makeInstance","rotation","Math","PI","update","time","angle","light","set","canvas","clock","screenDimensions","width","height","mousePosition","background","buildScene","renderer","antialias","alpha","xr","enabled","DPR","window","devicePixelRatio","setPixelRatio","setSize","buildRender","camera","aspectRatio","buildCamera","sceneSubjects","GeneralLights","SceneSubject","createSceneSubjects","elapsedTime","getElapsedTime","i","length","render","onWindowResize","aspect","updateProjectionMatrix","onMouseMove","vrb","ARButton","createButton","vrRender","ren","setAnimationLoop","Header","container","canvasHalfWidth","canvasHalfHeight","document","createElement","appendChild","createCanvas","sceneManager","SceneManager","resizeCanvas","style","offsetWidth","offsetHeight","round","mouseMove","screenX","screenY","onresize","onmousemove","threeEntryPoint","this","threeRootElement","className","ref","element","Component","App","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.6a5ba4d3.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport alphaTexture from '../../../assets/textures/stripes_gradient.jpg';\n\nexport default function scene(scene) {    \n    const group = new THREE.Group();\n\n    /*const subjectGeometry = deformGeometry(new THREE.IcosahedronGeometry(10, 2));\n    \n    const subjectMaterial = new THREE.MeshStandardMaterial({ color: \"#000\", transparent: true, side: THREE.DoubleSide, alphaTest: 0.5 });\n    subjectMaterial.alphaMap = new THREE.TextureLoader().load(alphaTexture);\n    subjectMaterial.alphaMap.magFilter = THREE.NearestFilter;\n    subjectMaterial.alphaMap.wrapT = THREE.RepeatWrapping;\n    subjectMaterial.alphaMap.repeat.y = 1;\n\n    const subjectMesh = new THREE.Mesh(subjectGeometry, subjectMaterial);\n        \n    const subjectWireframe = new THREE.LineSegments(\n        new THREE.EdgesGeometry(subjectGeometry),\n        new THREE.LineBasicMaterial()\n    );\n\n    group.add(subjectMesh);\n    group.add(subjectWireframe);*/\n    const boxGeometry = new THREE.BoxGeometry(1, 1, 1);\n    function makeInstance(geometry, color, x) {\n        const material = new THREE.MeshPhongMaterial({color});\n    \n        const cube = new THREE.Mesh(geometry, material);\n        scene.add(cube);\n    \n        cube.position.x = x;\n        cube.position.y = 1.6;\n        cube.position.z = -2;\n    \n        return cube;\n      }\n    const cubes = [\n    makeInstance(boxGeometry, 0x44aa88,  0),\n      ];\n    //group.add(boxGeometry);\n    //scene.add(group);\n\n\n    group.rotation.z = Math.PI/4;\n\n    const speed = 0.5;\n    const textureOffsetSpeed = 0.02;\n\n    function deformGeometry(geometry) {\n        /*for (let i=0; i<geometry.vertices.length; i+=2) {\n            const scalar = 1 + Math.random()*0.8;\n            geometry.vertices[i].multiplyScalar(scalar)\n        }*/\n\n        return geometry;\n    }\n\n    function update(time) {\n        const angle = time*speed;\n\n        //group.rotation.y = angle;\n        cubes[0].rotation.x = angle;\n        cubes[0].rotation.y = angle;\n        //subjectMaterial.alphaMap.offset.y = 0.55 + time * textureOffsetSpeed;\n\n        //subjectWireframe.material.color.setHSL( Math.sin(angle*2), 0.5, 0.5 );\n        \n        //const scale = (Math.sin(angle*8)+6.4)/5;\n        //subjectWireframe.scale.set(scale, scale, scale)\n    }\n\n    return {\n        update\n    }\n}","import * as THREE from 'three'\n\n\nexport default function scene(scene) {    \n\n    /*const lightIn = new THREE.PointLight(\"#4CAF50\", 30);\n    const lightOut = new THREE.PointLight(\"#2196F3\", 10);\n    lightOut.position.set(40,20,40);*/\n    const color = 0xFFFFFF;\n    const intensity = 1;\n    const light = new THREE.DirectionalLight(color, intensity);\n    //light.position.set(-1, 2, 4);\n    light.position.set(-1, 2, 4);\n    scene.add(light);\n    //scene.add(lightIn);\n    //scene.add(lightOut);\n    \n    const rad = 80;\n\n    function update(time) {\n        //const x = rad * Math.sin(time*0.2)\n        //lightOut.position.x = x;\n    }\n\n    return {\n        update\n    }\n}","import * as THREE from 'three';\nimport SceneSubject from './SceneSubject';\nimport GeneralLights from './GeneralLights';\n//import { VRButton } from 'three/examples/jsm/webxr/VRButton';\nimport { ARButton } from 'three/examples/jsm/webxr/ARButton';\nexport default function canvas(canvas)  {\n\n    const clock = new THREE.Clock();\n    const origin = new THREE.Vector3(0,0,0);\n\n    const screenDimensions = {\n        width: canvas.width,\n        height: canvas.height\n    }\n\n    const mousePosition = {\n        x: 0,\n        y: 0\n    }\n\n    const scene = buildScene();\n    const renderer = buildRender(screenDimensions);\n    const camera = buildCamera(screenDimensions);\n    const sceneSubjects = createSceneSubjects(scene);\n    const vrb = ARButton.createButton( renderer );\n    \n    \n\n    function buildScene() {\n        const scene = new THREE.Scene();\n        //scene.background = new THREE.Color(\"#FFF\");\n        scene.background = new THREE.Color('black');\n\n        return scene;\n    }\n\n    function buildRender({ width, height }) {\n        const renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true, alpha: true }); \n        renderer.xr.enabled = true;\n        const DPR = window.devicePixelRatio ? window.devicePixelRatio : 1;\n        renderer.setPixelRatio(DPR);\n        renderer.setSize(width, height);\n\n        //renderer.gammaInput = true;\n        //renderer.gammaOutput = true; \n        \n        return renderer;\n    }\n\n    function buildCamera({ width, height }) {\n        const aspectRatio = width / height;\n        const fieldOfView = 75;\n        const nearPlane = 0.1;\n        const farPlane = 50; \n        const camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n\n        //camera.position.z = 40;\n        camera.position.set(0, 1.6, 0);\n\n        return camera;\n    }\n\n    function createSceneSubjects(scene) {\n        const sceneSubjects = [\n            new GeneralLights(scene),\n            new SceneSubject(scene)\n        ];\n\n        return sceneSubjects;\n    }\n\n    function update() {\n        const elapsedTime = clock.getElapsedTime();\n\n        for(let i=0; i<sceneSubjects.length; i++)\n            sceneSubjects[i].update(elapsedTime);\n\n        //updateCameraPositionRelativeToMouse();\n\n        renderer.render(scene, camera);\n    }\n\n    function updateCameraPositionRelativeToMouse() {\n        camera.position.x += (  (mousePosition.x * 0.01) - camera.position.x ) * 0.01;\n        camera.position.y += ( -(mousePosition.y * 0.01) - camera.position.y ) * 0.01;\n        camera.lookAt(origin);\n    }\n\n    function onWindowResize() {\n        const { width, height } = canvas;\n        \n        screenDimensions.width = width;\n        screenDimensions.height = height;\n\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        \n        renderer.setSize(width, height);\n    }\n\n    function onMouseMove(x, y) {\n        mousePosition.x = x;\n        mousePosition.y = y;\n    }\n\n    function vrRender(ren){\n        renderer.setAnimationLoop(ren);\n    }\n    return {\n        update,\n        onWindowResize,\n        onMouseMove,\n        vrb,\n        vrRender\n    }\n}","import SceneManager from './SceneManager';\n\n\nexport default container => {\n    const canvas = createCanvas(document, container);\n    const sceneManager = new SceneManager(canvas);\n\n    let canvasHalfWidth;\n    let canvasHalfHeight;\n    \n    //container.appendChild(VRButton.createButton( sceneManager.renderer ));\n    container.appendChild(sceneManager.vrb);\n    bindEventListeners();\n    render();\n    \n\n    function createCanvas(document, container) {\n        const canvas = document.createElement('canvas');     \n        container.appendChild(canvas);\n        \n        return canvas;\n    }\n\n    function bindEventListeners() {\n        window.onresize = resizeCanvas;\n        window.onmousemove = mouseMove;\n        resizeCanvas();\t\n    }\n\n    function resizeCanvas() {        \n        canvas.style.width = '100%';\n        canvas.style.height= '100%';\n        \n        canvas.width  = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n\n        canvasHalfWidth = Math.round(canvas.offsetWidth/2);\n        canvasHalfHeight = Math.round(canvas.offsetHeight/2);\n\n        sceneManager.onWindowResize()\n    }\n\n    function mouseMove({screenX, screenY}) {\n        sceneManager.onMouseMove(screenX-canvasHalfWidth, screenY-canvasHalfHeight);\n    }\n\n    function render(time) {\n        //sceneManager.render.setAnimationLoop(render);\n        sceneManager.vrRender(render);\n        //requestAnimationFrame(render);\n        sceneManager.update();\n    }\n}","import React, { Component } from 'react';\n\nimport threeEntryPoint from \"./threejs/threeEntryPoint\"\nimport \"./header.css\"\n\nexport default class Header extends Component {\n    \n    componentDidMount() {\n        threeEntryPoint(this.threeRootElement);\n    }\n\n    render () {\n        return (\n            <div className=\"header-header\" ref={element => this.threeRootElement = element} />\n        );\n    }\n}","//import logo from './logo.svg';\nimport { findDOMNode } from 'react-dom';\nimport './App.css';\nimport Header from './Components/header/Header';\n\nfunction Header1(props){\n  return(\n    <header>\n      <h1> {props.name} Header</h1>\n    </header>\n  );\n}\nfunction Main(){\n\n  return(\n    <section>\n      \n    </section>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      {/*<Header1 name = \"some text\"/>*/}\n      <Header />\n      {/*<h2>ok</h2>*/}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}